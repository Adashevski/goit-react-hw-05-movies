{"version":3,"file":"static/js/997.a02e2a7a.chunk.js","mappings":"4LAEaA,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,GAGd,C,mHCXD,EAAuB,mBAAvB,EAAgD,kBAAhD,EAAwE,kBAAxE,EAAiG,mBAAjG,EAA2H,mB,SCG9GC,EAAO,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC3B,OACE,eAAIC,UAAWC,EAAf,SACGH,EAAKI,KAAI,SAACC,EAAIC,GAAL,OACR,gBAAIJ,UAAWC,EAAf,UACGE,EAAGE,cACF,gBACEL,UAAWC,EACXK,IAAG,yCAAoCH,EAAGE,cAC1CE,IAAG,UAAKJ,EAAGK,MACXb,MAAO,OAGT,gBACEK,UAAWC,EACXK,IAAKG,EAAAA,EACLF,IAAG,UAAKJ,EAAGK,MACXb,MAAO,OAGX,eAAIK,UAAWC,EAAf,SAA6BE,EAAGK,QAChC,cAAGR,UAAWC,EAAd,SAA4BE,EAAGO,cAjBjC,UAAmCX,EAAnC,YAA8CK,EAAQ,GAD9C,KAuBf,E,oCCGD,EA3BkB,WAChB,OAAwBO,EAAAA,EAAAA,UAAS,IAAjC,eAAOb,EAAP,KAAac,EAAb,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACQf,GAAYgB,EAAAA,EAAAA,MAAZhB,QAEFiB,EAAO,mCAAG,WAAMC,GAAN,8EACdH,GAAa,GADC,UAEOI,EAAAA,EAAAA,IAAaD,GAFpB,OAERE,EAFQ,OAGdP,EAAQO,EAAOC,KAAKtB,MACpBgB,GAAa,GAJC,2CAAH,sDAUb,OAHAO,EAAAA,EAAAA,YAAU,WACRL,EAAQjB,EACT,GAAE,CAACA,KAEF,gCACmB,IAAhBD,EAAKwB,QACJ,uBAAG,qCAEH,SAACzB,EAAD,CAAMC,KAAMA,EAAMC,QAASA,IAE5Bc,IAAa,SAACtB,EAAA,EAAD,MAGnB,C,uMC7BDgC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAW,mCAAG,2FACZC,EAAWF,EAAAA,EAAAA,IAAA,qCAAwCG,EAAAA,IADvC,kBAEXD,GAFW,2CAAH,qDAKXE,EAAY,mCAAG,WAAMV,GAAN,8EACbQ,EAAWF,EAAAA,EAAAA,IAAA,gBAAmBN,EAAnB,oBAAiCS,EAAAA,EAAjC,oBADE,kBAEZD,GAFY,2CAAH,sDAKZG,EAAe,mCAAG,WAAOX,GAAP,4FAAWY,EAAX,+BAAkB,EAClCJ,EAAWF,EAAAA,EAAAA,IAAA,gBACNN,EADM,4BACgBS,EAAAA,EADhB,gCAC+CG,IAF1C,kBAIfJ,GAJe,2CAAH,sDAOfP,EAAY,mCAAG,WAAMD,GAAN,8EACbQ,EAAWF,EAAAA,EAAAA,IAAA,gBACNN,EADM,4BACgBS,EAAAA,EADhB,oBADE,kBAIZD,GAJY,2CAAH,sDAOZK,EAAW,mCAAG,WAAMC,GAAN,8EACZN,EAAWF,EAAAA,EAAAA,IAAA,+BACSG,EAAAA,EADT,iCACyCK,EADzC,yBADC,kBAIXN,GAJW,2CAAH,qD,4EC5BV,IAAMC,EAAU,mCACVjB,EACX,2J","sources":["components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","pages/CastPage/CastPage.jsx","services/api.js","services/utils.js"],"sourcesContent":["import { RotatingLines } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <RotatingLines\n      strokeColor=\"grey\"\n      strokeWidth=\"5\"\n      animationDuration=\"0.75\"\n      width=\"96\"\n      visible={true}\n    />\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\",\"img\":\"Cast_img__-isbW\",\"box\":\"Cast_box__nTwkx\",\"name\":\"Cast_name__6UbFm\",\"role\":\"Cast_role__BLVYL\"};","import { IMG_PLACEHOLDER } from 'services/utils';\nimport styles from './Cast.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Cast = ({ cast, movieId }) => {\n  return (\n    <ul className={styles.list}>\n      {cast.map((el, index) => (\n        <li className={styles.box} key={`${movieId}r${index + 1}`}>\n          {el.profile_path ? (\n            <img\n              className={styles.img}\n              src={`https://image.tmdb.org/t/p/w500${el.profile_path}`}\n              alt={`${el.name}`}\n              width={150}\n            />\n          ) : (\n            <img\n              className={styles.img}\n              src={IMG_PLACEHOLDER}\n              alt={`${el.name}`}\n              width={150}\n            />\n          )}\n          <h4 className={styles.name}>{el.name}</h4>\n          <p className={styles.role}>{el.character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n  movieId: PropTypes.string.isRequired,\n};\n","import { Cast } from 'components/Cast/Cast';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/api';\n\nconst MovieCast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  const getCast = async id => {\n    setIsLoading(true);\n    const answer = await getMovieCast(id);\n    setCast(answer.data.cast);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    getCast(movieId);\n  }, [movieId]);\n  return (\n    <>\n      {cast.length === 0 ? (\n        <p>There is no cast for this movie</p>\n      ) : (\n        <Cast cast={cast} movieId={movieId} />\n      )}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default MovieCast;\n","import axios from 'axios';\nimport { API_KEY } from './utils';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst getTrending = async () => {\n  const response = axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response;\n};\n\nconst getMovieInfo = async id => {\n  const response = axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`);\n  return response;\n};\n\nconst getMovieReviews = async (id, page = 1) => {\n  const response = axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n  return response;\n};\n\nconst getMovieCast = async id => {\n  const response = axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n};\n\nconst searchMovie = async query => {\n  const response = axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false`\n  );\n  return response;\n};\n\nexport {\n  getTrending,\n  getMovieInfo,\n  getMovieReviews,\n  getMovieCast,\n  searchMovie,\n};\n","export const API_KEY = '330fed723c91519f30cbe5ad45b50ac2';\nexport const IMG_PLACEHOLDER =\n  'https://previews.123rf.com/images/viktorijareut/viktorijareut1905/viktorijareut190500747/123236861-default-avatar-profile-icon-grey-photo-placeholder.jpg';\n"],"names":["Loader","strokeColor","strokeWidth","animationDuration","width","visible","Cast","cast","movieId","className","styles","map","el","index","profile_path","src","alt","name","IMG_PLACEHOLDER","character","useState","setCast","isLoading","setIsLoading","useParams","getCast","id","getMovieCast","answer","data","useEffect","length","axios","getTrending","response","API_KEY","getMovieInfo","getMovieReviews","page","searchMovie","query"],"sourceRoot":""}